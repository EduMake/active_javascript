{"testing_off_licence":{"30":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Fix the errors and warnings to complete the code?</li>\n\n\n","initial":"/*globals INPUT OUTPUT openWebOffLicence */\nfunction getValidInteger(AGE)\n{\n    if(/[0-9]+/.test(AGE)) {\n        return parseInt(AGE, 10);\n    }\n    OUTPUT(\"warning\", \"Not a Valid Number\");\n    return false;\n}\n\nfunction isValidAge(AGE)\n{   \n    if(AGE <= 2 || AGE >= 150) {\n        OUTPUT(\"warning\", \"Not a Valid Age\");\n        return false;\n    } else if(AGE < 18) {\n        OUTPUT(\"warning\", \"Not Old enough to drink\");\n        return false;\n    }\n    return true;\n}\n\nfunction main() {\n    var AGE = getValidInteger(INPUT(\"age\"));\n    if (AGE !== false) {\n        if (isValidAge(AGE)) {\n            openWebOffLicence();\n        }\n    }\n}\n","initial-v1":"/*globals INPUT OUTPUT openWebOffLicence */\nfunction isAgeValid(AGE)\n{\n    console.log(\"AGE\", AGE);\n    if(typeof AGE !== \"number\") {\n        return {valid:false, warning:\"Not a Valid Number\"};\n    }\n    if(AGE <= 2 || AGE >= 150) {\n        return {valid:false, warning:\"Not a Valid Age\"};\n    }\n    if(AGE < 18) {\n        return {valid:false, warning:\"Not Old enough to drink\"};\n    }\n    return {valid:true, warning:\"\"};\n}\n\nfunction main() {\n    var AGE = INPUT(\"age\");\n    if (isAgeValid(AGE)) {\n        openWebOffLicence();\n    }\n}\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/debuged/","display":{"en-GB":"debuged"}},"label":"Debug"}},"35":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"/*globals INPUT OUTPUT openWebOffLicence */\nfunction getValidInteger(AGE)\n{\n    if(/[0-9]+/.test(AGE)) {\n        return parseInt(AGE, 10);\n    }\n    OUTPUT(\"warning\", \"Not a Valid Number\");\n    return false;\n}\n\nfunction isValidAge(AGE)\n{   \n    if(AGE <= 2 || AGE >= 150) {\n        OUTPUT(\"warning\", \"Not a Valid Age\");\n        return false;\n    } else if(AGE < 18) {\n        OUTPUT(\"warning\", \"Not Old enough to drink\");\n        return false;\n    }\n    return true;\n}\n\nfunction main() {\n    var AGE = getValidInteger(INPUT(\"age\"));\n    if (AGE !== false) {\n        if (isValidAge(AGE)) {\n            openWebOffLicence();\n        }\n    }\n}\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/completed/","display":{"en-GB":"completed"}},"label":"Complete"}},"tests":"\nfunction testIsAgeValid(number, bExpectValid, sReg) {\n    var bValid = isValidAge(number);\n    if( bExpectValid !== bValid) {\n        return false;\n    }\n    \n    var sWarning = $(\"#warning\").html();\n    var regexObj = new RegExp(sReg, \"i\");\n    var bRegResult = regexObj.test(sWarning);\n    return bRegResult;\n}\n\nassert( testIsAgeValid(2, false, \"Not a Valid Age\"),  '2 is \"Not a Valid Age\"', \"logic\");\nassert( testIsAgeValid(3, false, \"Not old enough to drink\"),  '3 is \"Not old enough to drink\"', \"logic\");\nassert( testIsAgeValid(17, false, \"Not old enough to drink\"),  '17 is \"Not old enough to drink\"', \"logic\");\nassert( testIsAgeValid(18, true, \"\"),  '18 is valid', \"logic\");\nassert( testIsAgeValid(149, true, \"\"),  '149 is valid', \"logic\");\nassert( testIsAgeValid(150, false, \"Not a Valid Age\"),  '150 is \"Not a Valid Age\"', \"logic\");\nassert( testIsAgeValid(999999, false, \"Not a Valid Age\"),  '999999999 is \"Not a Valid Age\"', \"logic\");\nassert( getValidInteger(\"ten\") === false,  '\"ten\" is \"Not a Valid Number\"', \"logic\");\nassert( getValidInteger(10) === 10,  '10 is \"A Valid Number\"', \"logic\");\n\n\n\n","simulation":"<label for=\"age\">Your Age</label>\n<input id=\"age\" value=\"\" />\n<br />\n<button id=\"start\">Check</button>\n\n<div id=\"output\">\n    <div >Warnings : <span id=\"warning\" style=\"color:red;font-weight:bold;\"></span></div>\n</div>\n","info":{"name":"Age Validation","tags":["selection","if","else"],"default":false,"objects":["http://utc-sheffield.github.io/tincan_curriculum/OCR_GCSE_Computing_2012/#2-1-7-Q"],"towards":[]},"context":"function INPUT(ControlName) {\n    var ele = $(\"#\" + ControlName);\n    if(ele.prop(\"tagName\") === \"SPAN\") {\n        return ele.html();\n    } else {\n        return ele.val();\n    }\n}\n\nfunction OUTPUT(Out, Val) {\n    if(typeof Val === \"undefined\") {\n        $(\"#output\").append(\"<pre>\" + Out + \"</pre>\");\n    } else {\n        var ele = $(\"#\" + Out);\n        if(ele.prop(\"tagName\") === \"SPAN\") {\n            ele.html(Val);\n        } else {\n            ele.val(Val);\n        }\n    }\n}\n\nfunction GET(ControlName) {\n    return INPUT(ControlName);\n}\n\n\nfunction openWebOffLicence() {\n    OUTPUT(\"Welcome to the Web Off Licence\");\n}\n\n//CODE//\n\n\n//TESTS//\n\nfunction run() {\n    $(\"#output\").html(\"\");\n    main();\n}\n\n$(\"#start\").click(run);\nmain();\n\n"},"student_array":{"30":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Fix the errors and warnings to complete the code?</li>\n\n\n","initial":"var students = [\"John\", \"Paul\", \"George\", \"Ringo\"];\n\n\nassert(students[0] === \"\", \"Index 0 is 'John'\", \"\");\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/debuged/","display":{"en-GB":"debuged"}},"label":"Debug"}},"35":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        if(AirTemp < MinTemp) {\n            Status = \"OFF\";\n        }\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/completed/","display":{"en-GB":"completed"}},"label":"Complete"}},"40":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        //Your code should go here\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/thinking/developed/","display":{"en-GB":"developed"}},"label":"Develop"}},"45":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Write the function body so that Status = \"ON\" or \"OFF\" when the boiler needs to turn On or Off</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    //Your code should go here\n    \n    return Status;\n}\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/thinking/designed/","display":{"en-GB":"designed"}},"label":"Design"}},"tests":"assert( true === true,  'Test description.', \"logic\");\n\n\n\n","simulation":"\n<button id=\"start\">Start</button>\n<br />\n<div id=\"output\"></div>\n","info":{"name":"Student Array","tags":["array"],"default":true,"objects":["http://utc-sheffield.github.io/tincan_curriculum/OCR_GCSE_Computing_2012/#2-1-7-O"],"towards":[]},"context":"\nfunction INPUT(ControlName) {\n    return $(\"#\" + ControlName).val();\n    \n}\n\nfunction OUTPUT(Out, Val) {\n    if(typeof Val === \"undefined\")\n    {\n        $(\"#output\").append(\"<pre>\" + Out + \"</pre>\");\n    }\n    else\n    {\n        $(\"#\" + Out).val(Val);\n    }\n}\n\nfunction GET(ControlName) {\n    return $(\"#\" + ControlName).val();\n}\n\n//var MinTemp = INPUT(\"mintemp\");\n\n\nfunction main(){\n//CODE//\n}\n\n//TESTS//\n\n\nfunction run() {\n    stop();\n    $(\"#output\").html(\"\");\n    main();\n}\n\n\n$(\"#start\").click(run);\n//$(\"#stop\").click(stop);\nmain();\n\n"},"shopping_list":{"30":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Fix the errors and warnings to complete the code?</li>\n\n\n","initial":"var students = [\"John\", \"Paul\", \"George\", \"Ringo\"];\n\n\nassert(students[0] === \"\", \"Index 0 is 'John'\", \"\");\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/debuged/","display":{"en-GB":"debuged"}},"label":"Debug"}},"35":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        if(AirTemp < MinTemp) {\n            Status = \"OFF\";\n        }\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/completed/","display":{"en-GB":"completed"}},"label":"Complete"}},"40":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        //Your code should go here\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/thinking/developed/","display":{"en-GB":"developed"}},"label":"Develop"}},"45":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Write the function body so that Status = \"ON\" or \"OFF\" when the boiler needs to turn On or Off</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    //Your code should go here\n    \n    return Status;\n}\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/thinking/designed/","display":{"en-GB":"designed"}},"label":"Design"}},"tests":"assert( true === true,  'Test description.', \"logic\");\n\n\n\n","simulation":"\n<button id=\"start\">Start</button>\n<br />\n<div id=\"output\"></div>\n","info":{"name":"Shopping List","tags":["array"],"default":false,"objects":["http://utc-sheffield.github.io/tincan_curriculum/OCR_GCSE_Computing_2012/#2-1-7-O"],"towards":[]},"context":"\nfunction INPUT(ControlName) {\n    return $(\"#\" + ControlName).val();\n    \n}\n\nfunction OUTPUT(Out, Val) {\n    if(typeof Val === \"undefined\")\n    {\n        $(\"#output\").append(\"<pre>\" + Out + \"</pre>\");\n    }\n    else\n    {\n        $(\"#\" + Out).val(Val);\n    }\n}\n\nfunction GET(ControlName) {\n    return $(\"#\" + ControlName).val();\n}\n\n//var MinTemp = INPUT(\"mintemp\");\n\n\nfunction main(){\n//CODE//\n}\n\n//TESTS//\n\n\nfunction run() {\n    stop();\n    $(\"#output\").html(\"\");\n    main();\n}\n\n\n$(\"#start\").click(run);\n//$(\"#stop\").click(stop);\nmain();\n\n"},"homophones":{"30":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Fix the errors and warnings to complete the code?</li>\n\n\n","initial":"var aHomophones = [\"'ere\", \"ade\", \"aid\", \"aide\", \"air\", \"allowed\", \"aloud\", \"bare\", \"bare\", \"bear\", \"blew\", \"blue\", \"disc\", \"disk\", \"eyre\", \"fain\", \"fair\", \"fane\", \"fare\", \"fayre\", \"feign\", \"for\", \"fore\", \"four\", \"grate\", \"great\", \"heir\", \"miner\", \"minor\", \"moor\", \"more\", \"pair\", \"pare\", \"pear\", \"sign\", \"sine\", \"syne\", \"tare\", \"tear\", \"their\", \"there\", \"they’re\", \"wailer\", \"waler\", \"wear\", \"weather\", \"whaler\", \"where\", \"whether\", \"which\", \"witch\"];\n\nfunction findHomophones(aWords){\n    var aHomophoneList = [];\n    for(var i = 0; i < aWords.length; i++) {\n        var sWord = aWords[i];\n        if(isHomophone(sWord)) //if(aHomophones.indexOf(sWord) >= 0)\n        {\n            aHomophoneList.push(sWord);       \n        }\n    }\n    return aHomophoneList;\n}\n    \nfunction isHomophone(sWord){\n    return aHomophones.indexOf(sWord) >= 0;\n}\n\nfunction findHomophones2(aWords){\n    return aWords.filter(isHomophone);\n}\n\n\nfunction highlight() {\n    var sText = $(\"#text\").html().trim([\" \", \"\\n\"]);    \n    var aWords = sText.toLowerCase().split(/\\W/);\n    \n    var aFoundWords =  findHomophones(aWords);\n    console.log(aFoundWords);\n    for(var i = 0; i < aFoundWords.length; i++) {\n        var sWord = aFoundWords[i];\n        //var sPattern = new RegExp(\"\\W\"+sWord+\"\\W\"\n        sText = sText.replace(sWord, '<span class=\"homophone\">'+sWord+'</span>');\n    }\n    $(\"#text\").html(sText);\n}\n\n\n$(\"#start\").click(highlight);\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/debuged/","display":{"en-GB":"debuged"}},"label":"Debug"}},"35":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"var aHomophones = [\"ade\", \"aid\", \"aide\", \"air\", \"allowed\", \"aloud\", \"bare\", \"bear\", \"blew\", \"blue\", \"disc\", \"disk\", \"eyre\", \"fain\", \"fair\", \"fane\", \"fare\", \"fayre\", \"feign\", \"for\", \"fore\", \"four\", \"grate\", \"great\", \"heir\", \"miner\", \"minor\", \"moor\", \"more\", \"pair\", \"pare\", \"pear\", \"sign\", \"sine\", \"syne\", \"tare\", \"tear\", \"their\", \"there\", \"they’re\", \"wailer\", \"waler\", \"wear\", \"weather\", \"whaler\", \"where\", \"whether\", \"which\", \"witch\"];\n\nfunction findHomophones(aWords){\n    var aHomophoneList = [];\n    for(var i = 0; i < aWords.length; i++) {\n        var sWord = aWords[i];\n        if(isHomophone(sWord))\n        {\n            aHomophoneList.push(sWord);       \n        }\n    }\n    return aHomophoneList;\n}\n    \nfunction isHomophone(sWord){\n    return aHomophones.indexOf(sWord) >= 0;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/completed/","display":{"en-GB":"completed"}},"label":"Complete"}},"40":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        //Your code should go here\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/thinking/developed/","display":{"en-GB":"developed"}},"label":"Develop"}},"45":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Write the function body so that Status = \"ON\" or \"OFF\" when the boiler needs to turn On or Off</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    //Your code should go here\n    \n    return Status;\n}\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/thinking/designed/","display":{"en-GB":"designed"}},"label":"Design"}},"tests":"assert( true === true,  'Test description.', \"logic\");\n\n\n\n","simulation":"<style>\n.output {\n  font-size: 150%;    \n}\n\n.homophone {\n    font-weight: bold;\n    color: red;\n}\n</style>\n<div id=\"text\">The weather is fair with crisp blue sky.<br />\nI shall wear my scarf out there.</div>\n\n<button id=\"start\">Highlight Homophones</button>\n\n<br />\n<div id=\"output\"></div>\n","info":{"name":"Homophones","tags":["array"],"default":false,"objects":["http://utc-sheffield.github.io/tincan_curriculum/OCR_GCSE_Computing_2012/#2-1-7-O"],"towards":[]},"context":"\nfunction INPUT(ControlName) {\n    return $(\"#\" + ControlName).val();\n    \n}\n\nfunction OUTPUT(Out, Val) {\n    if(typeof Val === \"undefined\")\n    {\n        $(\"#output\").append(\"<pre>\" + Out + \"</pre>\");\n    }\n    else\n    {\n        $(\"#\" + Out).val(Val);\n    }\n}\n\nfunction GET(ControlName) {\n    return $(\"#\" + ControlName).val();\n}\n\n//var MinTemp = INPUT(\"mintemp\");\n\n\n//CODE//\n\n\n//TESTS//\n\n\nfunction findHomophones2(aWords){\n    return aWords.filter(isHomophone);\n}\n\n\nfunction main() {\n    var sText = $(\"#text\").html().trim([\" \",\"\\n\"]);    \n    var aWords = sText.split(/\\W/);\n    \n    var aFoundWords =  findHomophones(aWords);\n\n    for(var i = 0; i < aFoundWords.length; i++) {\n        var sWord = aFoundWords[i];\n        //var sPattern = new RegExp(\"\\W\"+sWord+\"\\W\"\n        sText = sText.replace(sWord, '<span class=\"homophone\">'+sWord+'</span>');\n    }\n    $(\"#text\").html(sText);\n}\n\nfunction run() {\n    stop();\n    $(\"#output\").html(\"\");\n    main();\n}\n\n\n$(\"#start\").click(run);\n//$(\"#stop\").click(stop);\n//main();\n\n"},"central_heating":{"30":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Fix the errors and warnings to complete the code?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else \n        if(AirTemp > MaxTemp); {\n            Status = \"OFF\";\n        }\n    }\n    return Stratus;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/debuged/","display":{"en-GB":"debuged"}},"label":"Debug"}},"35":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        if(AirTemp < MinTemp) {\n            Status = \"OFF\";\n        }\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/completed/","display":{"en-GB":"completed"}},"label":"Complete"}},"40":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        //Your code should go here\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/thinking/developed/","display":{"en-GB":"developed"}},"label":"Develop"}},"45":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Write the function body so that Status = \"ON\" or \"OFF\" when the boiler needs to turn On or Off</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    //Your code should go here\n    \n    return Status;\n}\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/thinking/designed/","display":{"en-GB":"designed"}},"label":"Design"}},"tests":"assert( calcBoilerStatus(19, 22, 18, \"OFF\") == \"ON\",  'Boiler should turn ON when too cold.', \"logic\");\n\nassert( calcBoilerStatus(19, 22, 23, \"ON\") == \"OFF\", 'Boiler should turn OFF when too hot.', \"logic\");\n\nassert( calcBoilerStatus(19, 22, 20, \"ON\") == \"ON\", 'Boiler should stay ON  when temp is OK.', \"logic\");\n\nassert( calcBoilerStatus(19, 22, 20, \"OFF\") == \"OFF\", 'Boiler should stay OFF when temp is OK.', \"logic\");\n\n","simulation":"<!--<h2>Central Heating</h2>-->\n<label for=\"mintemp\">Min Temperature</label>\n<input type=\"number\" id=\"mintemp\" value=\"19\" />\n<br />\n<label for=\"mintemp\">Max Temperature</label>\n<input type=\"number\" id=\"maxtemp\" value=\"22\" />\n<br />\n<label for=\"airtemp\">Air Temperature</label>\n<input type=\"number\" id=\"airtemp\" value=\"26\" readonly=\"true\" />\n<br />\n<button id=\"start\">Start</button>\n<button id=\"stop\">Stop</button>\n<br />\n<label for=\"boiler\">Boiler Status</label>\n<output id=\"boiler\">OFF</output>\n<div id=\"output\"></div>\n","info":{"name":"Central Heating","tags":["selection","if","else"],"default":true,"objects":["http://utc-sheffield.github.io/tincan_curriculum/OCR_GCSE_Computing_2012/#2-1-7-H"],"towards":[]},"context":"\nfunction INPUT(ControlName) {\n    return $(\"#\" + ControlName).val();\n    \n}\n\nfunction OUTPUT(Out, Val) {\n    if(typeof Val === \"undefined\")\n    {\n        $(\"#output\").append(\"<pre>\" + Out + \"</pre>\");\n    }\n    else\n    {\n        $(\"#\" + Out).val(Val);\n    }\n}\n\n\nfunction GET(ControlName) {\n    return $(\"#\" + ControlName).val();\n}\n\n$(\"#airtemp\").val(26);\n$(\"#boiler\").val(\"OFF\");\nvar MinTemp = INPUT(\"mintemp\");\nvar MaxTemp = INPUT(\"maxtemp\");\nvar AirTemp = GET(\"airtemp\");\nvar Boiler = GET(\"boiler\");\n\n\n//CODE//\n\n\n\nfunction loop() {\n    MinTemp = INPUT(\"mintemp\");\n    MaxTemp = INPUT(\"maxtemp\");\n    AirTemp = GET(\"airtemp\");\n    OldStatus = GET(\"boiler\");\n    Boiler = calcBoilerStatus(MinTemp, MaxTemp, AirTemp, OldStatus);\n    OUTPUT(\"boiler\", Boiler);\n}\n\n\n\nfunction stop(){\n    window.clearInterval(intervalID);\n}\n\n\nfunction _loop(){\n    loop();\n\n    if (Boiler === \"ON\")\n    {\n        AirTemp ++;\n        $(\"#airtemp\").val( AirTemp);\n    }\n    else\n    {\n        if( AirTemp > -5)\n        {\n            AirTemp --;\n            $(\"#airtemp\").val( AirTemp );\n        }\n        else\n        {\n            OUTPUT(\"You are frozen solid!!!\");\n            stop();\n        }\n    }\n    if( AirTemp >= 50)\n    {\n      OUTPUT(\"House on Fire!!!\");\n      stop();\n    }\n}\n\nfunction main(){\n  intervalID = window.setInterval(_loop, 1000);\n}\n\nfunction run() {\n    stop();\n    $(\"#output\").html(\"\");\n    main();\n}\n\n//TESTS//\n\n$(\"#start\").click(run);\n$(\"#stop\").click(stop);\nmain();\n\n"},"caesar":{"35":{"task":"<li>Caesar Cypher</li>\n\n","initial":"var Encrypt = function(Alphabet, SubstitutionAlphabet, PlainText) {\n    var OutputText = \"\"; //We start with no letters in our output\n    \n    //The variable i will go up from 0 (pointing to the first letter)\n    //until i = the length of our plain text (pointing to the last letter in our plain text)\n    for(var i = 0 ; i < PlainText.length; i++) { \n        var PlainTextLetter = PlainText[i]; //The letter we want to Encypher this time\n        var Position = Alphabet.search(PlainTextLetter); //Finds what position our Letter is in our Alphabet\n        if(Position === -1) { //If we didn't find the letter in our Alphabet\n            Position = Alphabet.search(\"_\"); //Find \"_\" instead\n        }\n        var EncypheredLetter = SubstitutionAlphabet[Position]; //Look up that position in our Substitution Alphabet\n        OutputText += EncypheredLetter; //Add our Encyphered Letter to the OutputText\n    }\n    return OutputText; //Send it back\n};\n\nvar Decrypt = function(Alphabet, SubstitutionAlphabet, EncypheredText) {\n    var OutputText = \"\"; //We start with no letters in our output\n    \n    //The variable i will go up from 0 (pointing to the first letter)\n    //until i = the length of our encyphered text (pointing to the last letter in our encyphered text)\n    for(var i = 0 ; i < EncypheredText.length; i++) { \n                   //The letter we want to Encypher this time\n        var Position = SubstitutionAlphabet.search(EncypheredTextLetter); //Finds what position our Letter is in our SubstitutionAlphabet\n                   //Look up that position in our Plain text Alphabet\n        OutputText += PlainTextLetter; //Add our Plain Text Letter to the OutputText\n    }\n    return OutputText; //Send it back\n};\n\n","info":{"verb":{"id":"http://utc-sheffield.github.io/taxonomy/doing/completed/","display":{"en-GB":"completed"}},"label":"Complete"}},"tests":"assert( Encrypt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ_\", \"KLMNOPQRSTUVWXYZ_ABCDEFGHIJ\", \"ENCRYPTION TEST\") == \"OXMAHZCSYXJCOBC\",  'Should encrypt \"ENCRYPTION TEST\" to \"OXMAHZCSYXJCOBC\"', \"logic\");\n\nassert( Encrypt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ_\", \"PQRSTUVWXYZ_ABCDEFGHIJKLMNO\", \"ENCRYPTION TEST\") == \"TBRFMDHXCBOHTGH\",  'Should encrypt \"ENCRYPTION TEST\" to \"TBRFMDHXCBOHTGH\"', \"logic\");\n\nassert( Decrypt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ_\", \"KLMNOPQRSTUVWXYZ_ABCDEFGHIJ\", \"OXMAHZCSYXJCOBC\") == \"ENCRYPTION TEST\",  'Should decrypt \"OXMAHZCSYXJCOBC\" to \"ENCRYPTION TEST\"', \"logic\");\n\nassert( Decrypt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ_\", \"PQRSTUVWXYZ_ABCDEFGHIJKLMNO\", \"TBRFMDHXCBOHTGH\") == \"ENCRYPTION TEST\",  'Should decrypt \"TBRFMDHXCBOHTGH\" to \"ENCRYPTION TEST\"', \"logic\");\n\n","simulation":"<style type='text/css'>\n  pre{\n      font-size:2em;\n      margin:0px;\n      padding:0px;\n  }\n</style>\n\n<h2>Current Cypher Table</h2>\n<table>\n    <tr><th>Plain Text Alphabet</th><td><pre  id=\"alphabet\">ABCDEFGHIJKLMNOPQRSTUVWXYZ_</pre></td></tr>\n    <tr><th>Cypher Alphabet</th><td ><pre id=\"cypheralphabet\" contenteditable=\"true\">ABCDEFGHIJKLMNOPQRSTUVWXYZ_</pre></td></tr>\n</table>\n<h2>Make new Caesar Cypher</h2>\n<label>Caesar Cypher Key</label>\n<input type=\"number\" id=\"caesar_key\" value=\"0\" />\n<label>When we change the cypher automatically </label><select id=\"mode\">\n    <option>Encrypt</option>\n    <option>Decrypt</option>\n    <option>Do Nothing</option>\n</select>\n\n<h2>Messages</h2>\n<table>\n    <tr>\n        <th>Plain Text Message</th>\n        <td><input size=\"100\" id=\"plaintext\" value=\"\" hint=\"Put normal text here and it will be encoded below\"/></td>\n        <td><button class=\"getEncrypted\">Encrypt</button></td>\n    </tr>\n    <tr>\n        <th>Encyphered Text Message</th>\n        <td><input size=\"100\" id=\"encypheredtext\" value=\"\" hint=\"Put Encyphered text here and it will be decoded above\"/></td>\n        <td><button class=\"decrypt\">Decrypt</button></td>\n    </tr>\n</table>\n\n","info":{"name":"Caesar Cypher","tags":["selection","if","else"],"default":true,"objects":["http://utc-sheffield.github.io/tincan_curriculum/OCR_GCSE_Computing_2012/#2-1-7-H"],"towards":[]},"context":"$(\"#matchesfound\").hide();\n    \n    var autoAction = function() {\n        var sMode = $(\"#mode\").val();\n        if(sMode == \"Encrypt\") {\n            getEncrypted();\n        } else if(sMode == \"Decrypt\") {\n            getDecrypted();\n        }\n    };\n    \n    var makeCaesarCypher = function() {\n        var sAlphabet = $(\"#alphabet\").text();\n        var iCaesarKey = $(\"#caesar_key\").val() % sAlphabet.length;\n        var sStart =  sAlphabet.slice(0, iCaesarKey);\n        var sEnd =  sAlphabet.slice(iCaesarKey);\n        var sNew = sEnd + sStart;\n        $(\"#cypheralphabet\").text(sNew);\n        autoAction();\n    };\n    \n//CODE//    \n    \n    var getEncrypted = function() {\n        var sIn = $(\"#plaintext\").val();\n        var sAlphabet = $(\"#alphabet\").text(); \n        var sCypher = $(\"#cypheralphabet\").text();\n        var sEncypheredText = \"\";\n        if(sAlphabet.length !== sCypher.length)\n        {\n            sEncypheredText = \"Cypher Too Short\";\n        } else {\n            sEncypheredText = Encrypt(sAlphabet, sCypher, sIn);\n        }\n        $(\"#encypheredtext\").val(sEncypheredText);    \n    };\n\n    var getDecrypted = function() {\n        var sAlphabet = $(\"#alphabet\").text(); \n        var sIn = $(\"#encypheredtext\").val();\n        var sCypher = $(\"#cypheralphabet\").text();\n        var sPlainText = Decrypt(sAlphabet, sCypher, sIn);\n        $(\"#plaintext\").val(sPlainText);\n        testPlainText();\n    };\n    \n    var testPlainText = function () {\n        var aWords = $(\"#testwords\").val().split(\" \");\n        console.log(\"aWords =\", aWords);\n        var oReg = new RegExp(aWords.join(\"|\"));\n        console.log(\"oReg =\", oReg);\n        var sPlainText = $(\"#plaintext\").val();\n        console.log(\"sPlainText =\", sPlainText);\n        \n        if(oReg.test(sPlainText)) {\n           $(\"#matchesfound\").show();\n           return true;\n        } else {\n           $(\"#matchesfound\").hide();\n           return false;\n        } \n    };\n    \n    $(\"#caesar_key\").on(\"input\", makeCaesarCypher);\n    \n    $(\"#plaintext\").on(\"input\", getEncrypted);\n    \n    $(\"#plaintext\").on(\"input\", getEncrypted);\n    $(\"#encypheredtext\").on(\"input\", getDecrypted);\n    \n    $(\"#cypheralphabet\").on(\"input\", autoAction);\n    \n    $(\".getEncrypted\").click(getEncrypted);\n    $(\".decrypt\").click(getDecrypted);\n    \n    var iSearchTimer = 0;\n    function search(){\n        if(testPlainText()) {\n            clearTimeout(iSearchTimer);\n            return true;\n        }\n        $(\"#caesar_key\").val(parseInt($(\"#caesar_key\").val()) + 1 );\n        makeCaesarCypher();\n        iSearchTimer = setTimeout(search, 1000);\n    }\n    function search_start(){\n        $(\"#caesar_key\").val(0);\n        makeCaesarCypher();\n        search();\n    }\n    \n    $(\"#search\").click(search_start);\n    $(\"#continue_search\").click(search);\n    \n    \n    $(\"#testwords\").on(\"input\", testPlainText);\n    \n    makeCaesarCypher();\n"}}