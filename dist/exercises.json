{"central_heating":{"30":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Fix the errors and warnings to complete the code?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        if(AirTemp > MaxTemp); {\n            Status = \"OFF\";\n        }\n    }\n    return Stratus;\n}\n\n\n","info":{"verb":{"id":"http://www.edumake.org/blooms/fixed??/","display":{"en-GB":"fixed"}}}},"35":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        if(AirTemp < MinTemp) {\n            Status = \"OFF\";\n        }\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://www.edumake.org/blooms/recognised/","display":{"en-GB":"recognised"}}}},"40":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Check out what happens to the \"Air Temperature\", is that what we want?</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    if(AirTemp < MinTemp) {\n        Status = \"ON\";\n    } else {\n        //Your code should go here\n    }\n    return Status;\n}\n\n\n","info":{"verb":{"id":"http://www.edumake.org/blooms/employed/","display":{"en-GB":"employed"}}}},"45":{"task":"<li>This is code for Simulated Central Heating system</li>\n<li>In this simulation 1 second = 10 mins of real time</li>\n<li>Write the function body so that Status = \"ON\" or \"OFF\" when the boiler needs to turn On or Off</li>\n\n\n","initial":"function calcBoilerStatus(MinTemp, MaxTemp, AirTemp, Status) {\n    //Your code should go here\n    \n    return Status;\n}\n","info":{"verb":{"id":"http://www.edumake.org/blooms/developed/","display":{"en-GB":"developed"}}}},"tests":"assert( calcBoilerStatus(19, 22, 18, \"OFF\") == \"ON\",  'Boiler should turn ON when too cold.');\n\nassert( calcBoilerStatus(19, 22, 23, \"ON\") == \"OFF\", 'Boiler should turn OFF when too hot.');\n\nassert( calcBoilerStatus(19, 22, 20, \"ON\") == \"ON\", 'Boiler should stay ON  when temp is OK.');\n\nassert( calcBoilerStatus(19, 22, 20, \"OFF\") == \"OFF\", 'Boiler should stay OFF when temp is OK.');\n\n","simulation":"<!--<h2>Central Heating</h2>-->\n<label for=\"mintemp\">Min Temperature</label>\n<input type=\"number\" id=\"mintemp\" value=\"19\" />\n<br />\n<label for=\"mintemp\">Max Temperature</label>\n<input type=\"number\" id=\"maxtemp\" value=\"22\" />\n<br />\n<label for=\"airtemp\">Air Temperature</label>\n<input type=\"number\" id=\"airtemp\" value=\"26\" readonly=\"true\" />\n<br />\n<button id=\"start\">Start</button>\n<button id=\"stop\">Stop</button>\n<br />\n<label for=\"boiler\">Boiler Status</label>\n<output id=\"boiler\">OFF</output>\n<div id=\"output\"></div>\n","initial-object":"function calcBoilerStatus(AirTemp) {\n    if(this.AirTemp < this.MinTemp) {\n        this.status = \"ON\";\n    } else {\n        \n    }\n    return this.status;\n}\n\nfunction loop() {\n    boiler.MinTemp = INPUT(\"mintemp\");\n    boiler.MaxTemp = INPUT(\"maxtemp\");\n    var AirTemp = GET(\"airtemp\");\n    var BoilerStatus = boiler.calcBoilerStatus(AirTemp);\n    OUTPUT(\"boiler\", BoilerStatus);\n}\n\n","info":{"name":"Central Heating","tags":["selection"],"subject":"selection","default":true},"context":"\nfunction INPUT(ControlName) {\n    return $(\"#\" + ControlName).val();\n    \n}\n\nfunction OUTPUT(Out, Val) {\n    if(typeof Val === \"undefined\")\n    {\n        $(\"#output\").append(\"<pre>\" + Out + \"</pre>\");\n    }\n    else\n    {\n        $(\"#\" + Out).val(Val);\n    }\n}\n\n\nfunction GET(ControlName) {\n    return $(\"#\" + ControlName).val();\n}\n\n$(\"#airtemp\").val(26);\n$(\"#boiler\").val(\"OFF\");\nvar MinTemp = INPUT(\"mintemp\");\nvar MaxTemp = INPUT(\"maxtemp\");\nvar AirTemp = GET(\"airtemp\");\nvar Boiler = GET(\"boiler\");\n\n\n//CODE//\n\nfunction loop() {\n    MinTemp = INPUT(\"mintemp\");\n    MaxTemp = INPUT(\"maxtemp\");\n    AirTemp = GET(\"airtemp\");\n    OldStatus = GET(\"boiler\");\n    Boiler = calcBoilerStatus(MinTemp, MaxTemp, AirTemp, OldStatus);\n    OUTPUT(\"boiler\", Boiler);\n}\n\n\n\nfunction _loop(){\n    loop();\n\n    if (Boiler === \"ON\")\n    {\n        AirTemp ++;\n        $(\"#airtemp\").val( AirTemp);\n    }\n    else\n    {\n        if( AirTemp > -5)\n        {\n            AirTemp --;\n            $(\"#airtemp\").val( AirTemp );\n        }\n        else\n        {\n            OUTPUT(\"You are frozen solid!!!\");\n            stop();\n        }\n    }\n    if( AirTemp >= 50)\n    {\n      OUTPUT(\"House on Fire!!!\");\n      stop();\n    }\n}\n\nfunction main(){\n  intervalID = window.setInterval(_loop, 1000);\n}\n\n\nfunction stop(){\n    window.clearInterval(intervalID);\n}\n\nfunction run() {\n    stop();\n    $(\"#output\").html(\"\");\n    main();\n}\n\n\n$(\"#start\").click(run);\n$(\"#stop\").click(stop);\nmain();\n\n"}}